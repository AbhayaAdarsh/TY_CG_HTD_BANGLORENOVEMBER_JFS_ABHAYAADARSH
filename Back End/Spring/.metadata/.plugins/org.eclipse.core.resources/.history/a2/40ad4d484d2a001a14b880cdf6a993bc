package com.capgemini.productspringboot.controller;

import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.capgemini.productspringboot.dto.ProductBean;
import com.capgemini.productspringboot.dto.ProductResponse;
import com.capgemini.productspringboot.service.ProductService;

@RestController
public class ProductController {

		@Autowired
		private ProductService service;
		
		@PostMapping(path = "/auth" , produces=MediaType.APPLICATION_JSON_VALUE,consumes=MediaType.APPLICATION_JSON_VALUE)
		public ProductResponse auth(@RequestBody ProductBean bean) {
			ProductBean employeeBean= service.auth(bean.getEmail(),bean.getPassword());
			ProductResponse responce=new ProductResponse();
			if(bean!=null) {
				responce.setStatusCode(201);
				responce.setMessage("Success");
				responce.setDiscription("Employee found for the credentials");
				responce.setBeans(Arrays.asList(employeeBean));
			}else {
				responce.setStatusCode(401);
				responce.setMessage("Failure");
				responce.setDiscription("Credentials Invalid");
			}
			
			return responce;
		}
		
		@PostMapping(path = "/register", produces=MediaType.APPLICATION_JSON_VALUE,consumes=MediaType.APPLICATION_JSON_VALUE)
		public ProductResponse register(@RequestBody ProductBean bean) {
			System.out.println(bean.getPassword());
			ProductResponse responce=new ProductResponse();
			if(service.register(bean)) {
				responce.setStatusCode(201);
				responce.setMessage("Success");
				responce.setDiscription("Employee Registered");
				
			}else {
				responce.setStatusCode(401);
				responce.setMessage("Failure");
				responce.setDiscription("Email already exist");
			}
			return responce;
		}
		
		@GetMapping(path = "/get",produces=MediaType.APPLICATION_JSON_VALUE)//here we dont use consumes in getmapping
		public ProductResponse searchEmployee(@RequestParam("key") String key) {
			ProductResponse responce=new ProductResponse();
			List<ProductBean> beans=service.getProduct(key);
			if(beans.isEmpty()) {
				responce.setStatusCode(201);
				responce.setMessage("Success");
				responce.setDiscription("Employee Search Successful");
				
			}else {
				responce.setStatusCode(401);
				responce.setMessage("Failure");
				responce.setDiscription("Data not Found!!! ");
			}
			return  responce;
		}
		
		@PutMapping(path = "/change-password",produces=MediaType.APPLICATION_JSON_VALUE,consumes=MediaType.APPLICATION_JSON_VALUE)
		public ProductResponse changePassword(@RequestBody ProductBean bean) {
			ProductResponse responce=new ProductResponse();
			if( service.changePassword(bean.getId(),bean.getPassword())) {
				responce.setStatusCode(201);
				responce.setMessage("Success");
				responce.setDiscription("Password Updated....");
				
			}else {
				responce.setStatusCode(401);
				responce.setMessage("Failure");
				responce.setDiscription("Password not Changed...");
			}
			return responce;
		}
		
		@DeleteMapping(path="/delete/{id}")
		public ProductResponse deleteEmployee(@PathVariable("id") int id) {
			ProductResponse responce=new ProductResponse();
			service.deleteEmployee(id);
			responce.setStatusCode(201);
			responce.setMessage("Success");
			responce.setDiscription("Employee Details Deleted");
			return responce;
		}

}
