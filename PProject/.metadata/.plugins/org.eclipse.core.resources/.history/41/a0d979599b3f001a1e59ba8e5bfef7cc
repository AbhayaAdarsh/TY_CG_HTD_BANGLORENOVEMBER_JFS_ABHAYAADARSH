package com.capgemini.forestrymanagementsystem.hibernateforestrymanagementsystem.hibernatedao;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;

import com.capgemini.forestrymanagement.hibernatebean.ContractorBean;
import com.capgemini.forestrymanagement.hibernatebean.ProductBean;

public class ProductDaoImpl implements ProductDao {
	EntityManagerFactory factory = Persistence.createEntityManagerFactory("Test");

	@Override
	public boolean addProduct(ProductBean bean) {
		boolean isAdded = false;
		EntityManager manager = factory.createEntityManager();
		EntityTransaction transaction;
		try {
			transaction = manager.getTransaction();
			transaction.begin();
			manager.persist(bean);
			transaction.commit();
			isAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		manager.close();
		return isAdded;
	}

	@Override
	public boolean modifyProduct(ProductBean bean, int productid) {
		boolean isUpdated = false;
		EntityManager manager = factory.createEntityManager();
		ContractorBean bean1 = manager.find(ContractorBean.class, productid);
		EntityTransaction transaction = manager.getTransaction();
		if (bean1 != null) {
			try {
				transaction.begin();
				int productid1 = bean.getProductId();
				if (productid1 > 0) {
					bean1.setContractorId(productid1);
				}
				String productname = bean.getProductName().trim();
				if (productname != null && productname.isEmpty()) {
					bean1.setProductName(productname);
				}
				String dlvryDate = bean.getDeliveryDate().trim();
				if (dlvryDate != null && dlvryDate.isEmpty()) {
					bean1.setDeliveryDate(dlvryDate);
				}
				int qty = bean.getQty();
				if (qty > 0) {
					bean1.setQty(qty);
				}
				transaction.commit();
				isUpdated = true;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		manager.close();
		return isUpdated;
	}

	@Override
	public boolean deleteProduct(int productid) {
		boolean isDeleted = false;
		EntityManager manager = factory.createEntityManager();
		EntityTransaction transaction = null;
		ProductBean bean = manager.find(ProductBean.class, productid);
		if (bean != null) {
			transaction = manager.getTransaction();
			transaction.begin();
			manager.remove(bean);
			transaction.commit();
			isDeleted = true;
		}
		manager.close();
		return isDeleted;
	}
}
